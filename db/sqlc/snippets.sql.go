// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: snippets.sql

package db

import (
	"context"
)

const createSnippet = `-- name: CreateSnippet :one
INSERT INTO snippets(content,
    user_id
) VALUES (
    $1, $2
) RETURNING id, content, user_id, created_at, updated_at
`

type CreateSnippetParams struct {
	Content string
	UserID  int32
}

func (q *Queries) CreateSnippet(ctx context.Context, arg CreateSnippetParams) (Snippet, error) {
	row := q.db.QueryRowContext(ctx, createSnippet, arg.Content, arg.UserID)
	var i Snippet
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSnippet = `-- name: DeleteSnippet :exec
DELETE FROM snippets
WHERE id = $1
`

func (q *Queries) DeleteSnippet(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteSnippet, id)
	return err
}

const getSnippetByID = `-- name: GetSnippetByID :one
SELECT id, content, user_id, created_at, updated_at FROM snippets 
WHERE id = $1
`

func (q *Queries) GetSnippetByID(ctx context.Context, id int64) (Snippet, error) {
	row := q.db.QueryRowContext(ctx, getSnippetByID, id)
	var i Snippet
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listSnippets = `-- name: ListSnippets :many
SELECT id, content, user_id, created_at, updated_at FROM snippets
ORDER BY created_at DESC
`

func (q *Queries) ListSnippets(ctx context.Context) ([]Snippet, error) {
	rows, err := q.db.QueryContext(ctx, listSnippets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Snippet
	for rows.Next() {
		var i Snippet
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSnippetsByUserID = `-- name: ListSnippetsByUserID :many
SELECT id, content, user_id, created_at, updated_at
FROM snippets
WHERE user_id = $1
`

func (q *Queries) ListSnippetsByUserID(ctx context.Context, userID int32) ([]Snippet, error) {
	rows, err := q.db.QueryContext(ctx, listSnippetsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Snippet
	for rows.Next() {
		var i Snippet
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSnippetContent = `-- name: UpdateSnippetContent :one
UPDATE snippets
SET content = $2, updated_at = now()
WHERE id = $1
RETURNING id, content, user_id, created_at, updated_at
`

type UpdateSnippetContentParams struct {
	ID      int64
	Content string
}

func (q *Queries) UpdateSnippetContent(ctx context.Context, arg UpdateSnippetContentParams) (Snippet, error) {
	row := q.db.QueryRowContext(ctx, updateSnippetContent, arg.ID, arg.Content)
	var i Snippet
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
